openapi: 3.0.0
info:
  title: Fakultem API
  description: Fakultem uygulaması api.
  version: 0.1.9
servers:
  - url: http://165.227.153.191:25010/
    description: Canlı api
  - url: http://localhost:25010/
    description: Local test için.
components:
  securitySchemes:
    Fakultem Authentication JWT Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - Fakultem Authentication JWT Bearer: []
paths:
  /login:
    post:
      summary: Login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Success
  /login/register:
    post:
      summary: Register.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - passwordRepeat
                - username
                - schoolId
                - facultyId
                - departmentId
                - grade
                - gender
              properties:
                email:
                  type: string
                password:
                  type: string
                passwordRepeat:
                  type: string
                username:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                phoneNumber:
                  type: string
                  example: 5073959353
                profilePhotoUrl:
                  type: string
                schoolId:
                  type: string
                facultyId:
                  type: string
                departmentId:
                  type: string
                grade:
                  type: number
                gender:
                  type: number
                  description: 0(NotSpecified), 1(Male), 2(Female)
      responses:
        "200":
          description: Success
  /account/updateProfile:
    post:
      summary: Update user profile.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phoneNumber:
                  type: string
                  example: 5073959353
      responses:
        "200":
          description: Success
  /account/updateProfilePhoto:
    post:
      summary: Update user profile photo(accepts only with one of ".png", ".jpg", ".jpeg", ".svg" extensions and 5MB size limit).
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
               - photo
              properties:
                photo:
                  type: string
                  format: binary
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
  /account/sendConfirmationEmail:
    post:
      summary: This is only for user to send email confirmation after logged in if email confirmation some way failed(e.g. mail send failed, confirmation code expired).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isStudentEmail
              properties:
                isStudentEmail:
                  description: Declare as true if the confirmation is for student email, false if it is not. Declare it even if both account and student emails are same. It will be handled at backend.
                  type: boolean
      responses:
        "200":
          description: Success
  /account/updatePassword:
    post:
      summary: Update user password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                newPassword:
                  type: string
                newPasswordRepeat:
                  type: string
      responses:
        "200":
          description: Success
  /account/updateInterests:
    post:
      summary: Update user's interests.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - interestIds
              properties:
                interestIds:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Success
  /account/forgotPassword:
    post:
      summary: Forgot password(Code will be sended to email).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Success
  /account/confirmForgotPasswordCode:
    post:
      summary: Confirm forgot password code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - code
              properties:
                email:
                  type: string
                code:
                  type: number
      responses:
        "200":
          description: Success
  /account/resetPassword:
    post:
      summary: Confirm forgot password code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - code
                - newPassword
                - newPasswordRepeat
              properties:
                email:
                  type: string
                code:
                  type: number
                newPassword:
                  type: string
                newPasswordRepeat:
                  type: string
      responses:
        "200":
          description: Success
  /account/user:
    get:
      summary: Get user info.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  phoneNumber:
                    type: string
                  profilePhotoUrl:
                    type: string
                  role:
                    type: number
                  grade:
                    type: number
                  schoolId:
                    type: string
                  facultyId:
                    type: string
                  departmentId:
                    type: string
                  schoolName:
                    type: string
                  facultyName:
                    type: string
                  departmentName:
                    type: string
                  isAccEmailConfirmed:
                    type: boolean
                  isSchoolEmailConfirmed:
                    type: boolean
  /school/getAllSchools:
    get:
      summary: Get all schools.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    title:
                      type: string
  /school/getFaculties/{schoolId}:
    get:
      summary: Get all departments of the relevant school.
      parameters:
        - in: path
          name: schoolId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    title:
                      type: string
  /school/getDepartments/{facultyId}:
    get:
      summary: Get all departments of the relevant faculty.
      parameters:
        - in: path
          name: facultyId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    title:
                      type: string
                    grade:
                      type: number
  /interest/getAllInterests:
    get:
      summary: Get all interests.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    title:
                      type: string
